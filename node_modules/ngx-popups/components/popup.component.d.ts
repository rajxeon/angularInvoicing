import { ViewContainerRef, ElementRef, AfterViewInit } from '@angular/core';
import { NgxDOMComponent, NgxDOMComponentContainer, NgxDOMComponentService } from 'ngx-dom-component';
import { IPopupConfig } from '../services/ngx-popup.service';
import { DeferredPromise } from '../classes/DeferredPromise';
export declare enum NgxPopupState {
    CLOSED = "closed",
    CLOSING = "closing",
    OPENED = "opened",
    OPENING = "opening",
}
export declare type TNgxPopupState = 'closed' | 'closing' | 'opened' | 'opening' | NgxPopupState;
export declare class NgxPopupComponent implements AfterViewInit {
    private ngxDOMComponentService;
    protected contentContainer: ViewContainerRef;
    protected _closableListener: (() => void) | null;
    protected _backgroundClosable: boolean;
    protected _ngxDOMComponentContainer: NgxDOMComponentContainer;
    protected _ngxDOMComponent: NgxDOMComponent;
    protected _openPromise: DeferredPromise<void> | null;
    protected _closePromise: DeferredPromise<void> | null;
    protected _state: TNgxPopupState;
    protected _element: HTMLElement;
    constructor(ngxDOMComponentService: NgxDOMComponentService, element: ElementRef);
    /**
     * Returns the instance of the injected component.
     */
    readonly contentInstance: any;
    /**
     * Returns the DOM element of the popup
     * @returns {HTMLElement}
     */
    readonly element: HTMLElement;
    readonly state: TNgxPopupState;
    closable: boolean;
    backgroundClosable: boolean;
    ngAfterViewInit(): void;
    /**
     * The following events are available
     *
     * - open : after the popup is opened (including transition or not, according to 'waitTransitionEnd').
     * - close : after the popup is closed (including transition or not, according to 'waitTransitionEnd').
     * - beforeclose : when the close method is called. Use event.preventDefault() to cancel close.
     * - cancelopen : when an open is cancelled (ex: while animating, the popup is in a 'opening' state,
     *                if you call close before animation is complete, it cancels the open).
     *
     * All of them are CustomEvent, with a detail property that you can set when calling open or close.
     */
    addEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: any): void;
    dispatchEvent(event: Event): boolean;
    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject, useCapture?: any): void;
    open(config: IPopupConfig, waitTransitionEnd?: boolean, detail?: any): Promise<void>;
    /**
     * Close the popup.
     *
     * @param waitTransitionEnd
     * @param detail
     * @returns {Promise<void>} - promise resolved when the popup is closed
     */
    close(waitTransitionEnd?: boolean, detail?: any): Promise<void>;
    onClickBackground(event: any): void;
    private _build(config);
    private _waitTransitionEnd();
    private _getTransitionTime(element);
}

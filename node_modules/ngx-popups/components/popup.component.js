"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ngx_dom_component_1 = require("ngx-dom-component");
var DeferredPromise_1 = require("../classes/DeferredPromise");
var NgxPopupState;
(function (NgxPopupState) {
    NgxPopupState["CLOSED"] = "closed";
    NgxPopupState["CLOSING"] = "closing";
    NgxPopupState["OPENED"] = "opened";
    NgxPopupState["OPENING"] = "opening";
})(NgxPopupState = exports.NgxPopupState || (exports.NgxPopupState = {}));
var NgxPopupComponent = /** @class */ (function () {
    function NgxPopupComponent(ngxDOMComponentService, element) {
        this.ngxDOMComponentService = ngxDOMComponentService;
        this._closableListener = null;
        this._backgroundClosable = true;
        this._openPromise = null;
        this._closePromise = null;
        this._state = NgxPopupState.CLOSED;
        this._element = element.nativeElement;
    }
    Object.defineProperty(NgxPopupComponent.prototype, "contentInstance", {
        /**
         * Returns the instance of the injected component.
         */
        get: /**
           * Returns the instance of the injected component.
           */
        function () {
            return this._ngxDOMComponent.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPopupComponent.prototype, "element", {
        /**
         * Returns the DOM element of the popup
         * @returns {HTMLElement}
         */
        get: /**
           * Returns the DOM element of the popup
           * @returns {HTMLElement}
           */
        function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPopupComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPopupComponent.prototype, "closable", {
        get: function () {
            return this._closableListener === null;
        },
        set: function (value) {
            var _this = this;
            value = Boolean(value);
            var closable = (this._closableListener === null);
            if (value !== closable) {
                if (closable) {
                    // switch from true to false
                    var listener_1 = function (event) {
                        event.preventDefault();
                    };
                    this.addEventListener('beforeclose', listener_1);
                    this._closableListener = function () {
                        _this.removeEventListener('beforeclose', listener_1);
                        _this._closableListener = null;
                    };
                }
                else {
                    // switch from false to true
                    this._closableListener();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPopupComponent.prototype, "backgroundClosable", {
        get: function () {
            return this._backgroundClosable;
        },
        set: function (value) {
            this._backgroundClosable = Boolean(value);
        },
        enumerable: true,
        configurable: true
    });
    NgxPopupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._ngxDOMComponentContainer = this.ngxDOMComponentService.createContainer(this.contentContainer);
        requestAnimationFrame(function () {
            // allows css to apply without the class 'open'
            _this.dispatchEvent(new CustomEvent('ready'));
        });
    };
    /**
     * The following events are available
     *
     * - open : after the popup is opened (including transition or not, according to 'waitTransitionEnd').
     * - close : after the popup is closed (including transition or not, according to 'waitTransitionEnd').
     * - beforeclose : when the close method is called. Use event.preventDefault() to cancel close.
     * - cancelopen : when an open is cancelled (ex: while animating, the popup is in a 'opening' state,
     *                if you call close before animation is complete, it cancels the open).
     *
     * All of them are CustomEvent, with a detail property that you can set when calling open or close.
     */
    /**
       * The following events are available
       *
       * - open : after the popup is opened (including transition or not, according to 'waitTransitionEnd').
       * - close : after the popup is closed (including transition or not, according to 'waitTransitionEnd').
       * - beforeclose : when the close method is called. Use event.preventDefault() to cancel close.
       * - cancelopen : when an open is cancelled (ex: while animating, the popup is in a 'opening' state,
       *                if you call close before animation is complete, it cancels the open).
       *
       * All of them are CustomEvent, with a detail property that you can set when calling open or close.
       */
    NgxPopupComponent.prototype.addEventListener = /**
       * The following events are available
       *
       * - open : after the popup is opened (including transition or not, according to 'waitTransitionEnd').
       * - close : after the popup is closed (including transition or not, according to 'waitTransitionEnd').
       * - beforeclose : when the close method is called. Use event.preventDefault() to cancel close.
       * - cancelopen : when an open is cancelled (ex: while animating, the popup is in a 'opening' state,
       *                if you call close before animation is complete, it cancels the open).
       *
       * All of them are CustomEvent, with a detail property that you can set when calling open or close.
       */
    function (type, listener, useCapture) {
        return this._element.addEventListener(type, listener, useCapture);
    };
    NgxPopupComponent.prototype.dispatchEvent = function (event) {
        return this._element.dispatchEvent(event);
    };
    NgxPopupComponent.prototype.removeEventListener = function (type, listener, useCapture) {
        return this._element.removeEventListener(type, listener, useCapture);
    };
    NgxPopupComponent.prototype.open = function (config, waitTransitionEnd, detail) {
        var _this = this;
        if (waitTransitionEnd === void 0) { waitTransitionEnd = true; }
        if (this._openPromise === null) {
            this._openPromise = new DeferredPromise_1.DeferredPromise(function () {
                switch (_this._state) {
                    case NgxPopupState.CLOSED:
                    case NgxPopupState.CLOSING:
                        var beforeOpenPrevented = !_this.dispatchEvent(new CustomEvent('beforeopen', {
                            detail: detail,
                            bubbles: false,
                            cancelable: true
                        }));
                        if (beforeOpenPrevented) {
                            _this._openPromise.reject(new Error("Open prevented"));
                        }
                        else {
                            if (_this._state === NgxPopupState.CLOSING) {
                                _this.dispatchEvent(new CustomEvent('cancelclose'));
                                _this._closePromise.reject(new Error("Close cancelled"));
                            }
                            _this._state = NgxPopupState.OPENING;
                            _this._build(config);
                            requestAnimationFrame(function () {
                                // allows content to be rendered before adding 'open'
                                _this._element.classList.add('open');
                                if (waitTransitionEnd) {
                                    _this._waitTransitionEnd().then(function () {
                                        if (_this._openPromise !== null) {
                                            _this._openPromise.resolve();
                                        }
                                    });
                                }
                                else {
                                    _this._openPromise.resolve();
                                }
                            });
                        }
                        break;
                    default:
                        _this._openPromise.reject(new Error("Popup not closed"));
                        break;
                }
            });
            this._openPromise
                .then(function () {
                _this._state = NgxPopupState.OPENED;
                _this._openPromise = null;
                _this.dispatchEvent(new CustomEvent('open', {
                    detail: detail
                }));
            }, function () {
                _this._openPromise = null;
            });
        }
        return this._openPromise.promise;
    };
    /**
     * Close the popup.
     *
     * @param waitTransitionEnd
     * @param detail
     * @returns {Promise<void>} - promise resolved when the popup is closed
     */
    /**
       * Close the popup.
       *
       * @param waitTransitionEnd
       * @param detail
       * @returns {Promise<void>} - promise resolved when the popup is closed
       */
    NgxPopupComponent.prototype.close = /**
       * Close the popup.
       *
       * @param waitTransitionEnd
       * @param detail
       * @returns {Promise<void>} - promise resolved when the popup is closed
       */
    function (waitTransitionEnd, detail) {
        var _this = this;
        if (waitTransitionEnd === void 0) { waitTransitionEnd = true; }
        if (this._closePromise === null) {
            this._closePromise = new DeferredPromise_1.DeferredPromise(function () {
                switch (_this._state) {
                    case NgxPopupState.OPENED:
                    case NgxPopupState.OPENING:
                        var beforeClosePrevented = !_this.dispatchEvent(new CustomEvent('beforeclose', {
                            detail: detail,
                            bubbles: false,
                            cancelable: true
                        }));
                        if (beforeClosePrevented) {
                            _this._closePromise.reject(new Error("Close prevented"));
                        }
                        else {
                            if (_this._state === NgxPopupState.OPENING) {
                                _this.dispatchEvent(new CustomEvent('cancelopen'));
                                _this._openPromise.reject(new Error("Open cancelled"));
                            }
                            _this._state = NgxPopupState.CLOSING;
                            _this._element.classList.remove('open');
                            if (waitTransitionEnd) {
                                _this._waitTransitionEnd().then(function () {
                                    if (_this._closePromise !== null) {
                                        _this._closePromise.resolve();
                                    }
                                });
                            }
                            else {
                                _this._closePromise.resolve();
                            }
                        }
                        break;
                    default:
                        _this._closePromise.reject(new Error("Popup not opened"));
                        break;
                }
            });
            this._closePromise
                .then(function () {
                _this._state = NgxPopupState.CLOSED;
                _this._closePromise = null;
                _this.dispatchEvent(new CustomEvent('close', {
                    detail: detail
                }));
            }, function () {
                _this._closePromise = null;
            });
        }
        return this._closePromise.promise;
    };
    NgxPopupComponent.prototype.onClickBackground = function (event) {
        if (this._backgroundClosable && (event.target === this._element)) {
            this.close(true, event);
        }
    };
    NgxPopupComponent.prototype._build = function (config) {
        config.inputs = config.inputs || {};
        config.inputs['popup'] = this;
        this._ngxDOMComponent = this._ngxDOMComponentContainer.create(config);
    };
    NgxPopupComponent.prototype._waitTransitionEnd = function () {
        var _this = this;
        return new Promise(function (resolve) {
            var transitionTime = _this._getTransitionTime(_this._element);
            if ((transitionTime === null) || (transitionTime > 10)) {
                setTimeout(resolve, transitionTime || 250);
                _this.addEventListener('transitionend', resolve, { once: true });
            }
            else {
                resolve();
            }
        });
    };
    NgxPopupComponent.prototype._getTransitionTime = function (element) {
        var computedStyle = window.getComputedStyle(element);
        if (computedStyle.transitionDuration) {
            var timeReg = new RegExp('([\\d\\.]+)((?:s)|(?:ms))', 'g');
            var timeMatch = timeReg.exec(computedStyle.transitionDuration);
            if (timeMatch !== null) {
                var time = parseFloat(timeMatch[1]);
                switch (timeMatch[2]) {
                    case 's':
                        return time * 1000;
                    case 'ms':
                        return time;
                }
            }
        }
        return null;
    };
    NgxPopupComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngx-popup',
                    template: "\n   <div class=\"content\">\n    <ng-template #contentContainer></ng-template>\n   </div>\n  "
                },] },
    ];
    /** @nocollapse */
    NgxPopupComponent.ctorParameters = function () { return [
        { type: ngx_dom_component_1.NgxDOMComponentService, },
        { type: core_1.ElementRef, },
    ]; };
    NgxPopupComponent.propDecorators = {
        "contentContainer": [{ type: core_1.ViewChild, args: ['contentContainer', { read: core_1.ViewContainerRef },] },],
        "onClickBackground": [{ type: core_1.HostListener, args: ['click', ['$event'],] },],
    };
    return NgxPopupComponent;
}());
exports.NgxPopupComponent = NgxPopupComponent;

//# sourceMappingURL=data:application/json;base64,
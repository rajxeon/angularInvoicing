"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var ngx_dom_component_1 = require("ngx-dom-component");
var popup_component_1 = require("./popup.component");
var ngx_popup_service_1 = require("../services/ngx-popup.service");
// <ngx-popup
// *ngFor="let popupId of popupIds;"
// (popupReady)="onPopupReady($event)"
// (popupClosed)="onPopupClosed($event)"
//   [popupId]="popupId"
//   ></ngx-popup>
var NgxPopupsManagerComponent = /** @class */ (function () {
    function NgxPopupsManagerComponent(popupService, ngxDOMComponentService, element) {
        this.popupService = popupService;
        this.ngxDOMComponentService = ngxDOMComponentService;
        this._popups = [];
        this._element = element.nativeElement;
        if (!this._element.id) {
            this._element.id = 'popups-manager-' + Math.floor(Math.random() * 1e10).toString();
        }
        this.popupService.registerManager(this._element.id, this);
        this.checkVisibility();
    }
    NgxPopupsManagerComponent.prototype.ngAfterViewInit = function () {
        this._ngxDOMComponentContainer = this.ngxDOMComponentService.createContainer(this.popupsContainer);
    };
    NgxPopupsManagerComponent.prototype.open = function (config, waitTransitionEnd, detail) {
        var _this = this;
        return new Promise(function (resolve) {
            var ngxDOMComponent = _this._ngxDOMComponentContainer.create({
                componentType: popup_component_1.NgxPopupComponent
            });
            _this._popups.push(ngxDOMComponent);
            _this.checkVisibility();
            var popup = ngxDOMComponent.instance;
            popup.addEventListener('ready', function () {
                resolve(popup.open(config, waitTransitionEnd, detail).then(function () {
                    return popup;
                }));
            }, { once: true });
            popup.addEventListener('close', function () {
                var index = _this._popups.indexOf(ngxDOMComponent);
                if (index >= 0) {
                    _this._popups[index].destroy();
                    _this._popups.splice(index, 1);
                    _this.checkVisibility();
                }
            }, { once: true });
        });
    };
    NgxPopupsManagerComponent.prototype.close = function (popup, waitTransitionEnd, detail) {
        return popup.close(waitTransitionEnd, detail);
    };
    NgxPopupsManagerComponent.prototype.closeAll = function () {
        return Promise.all(this._popups.slice(0) // clone to avoid removing popups before finishing
            .map(function (popup) {
            return popup.instance.close();
        })).then(function () { return void 0; });
    };
    NgxPopupsManagerComponent.prototype.checkVisibility = function () {
        this._element.classList.toggle('visible', this._popups.length > 0);
    };
    NgxPopupsManagerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngx-popups',
                    template: "\n   <ng-template #popupsContainer></ng-template>\n  "
                },] },
    ];
    /** @nocollapse */
    NgxPopupsManagerComponent.ctorParameters = function () { return [
        { type: ngx_popup_service_1.NgxPopupService, },
        { type: ngx_dom_component_1.NgxDOMComponentService, },
        { type: core_1.ElementRef, },
    ]; };
    NgxPopupsManagerComponent.propDecorators = {
        "popupsContainer": [{ type: core_1.ViewChild, args: ['popupsContainer', { read: core_1.ViewContainerRef },] },],
    };
    return NgxPopupsManagerComponent;
}());
exports.NgxPopupsManagerComponent = NgxPopupsManagerComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXBzTWFuYWdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY29tcG9uZW50cy9wb3B1cHNNYW5hZ2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUV1QjtBQUN2Qix1REFBc0c7QUFFdEcscURBQXNEO0FBQ3RELG1FQUE4RTs7Ozs7Ozs7SUF3QjVFLG1DQUFvQixZQUE2QixFQUM3QixzQkFBOEMsRUFDdEQsT0FBbUI7UUFGWCxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDN0IsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUVoRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDcEY7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7S0FDeEI7SUFFRCxtREFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQ3BHO0lBRUQsd0NBQUksR0FBSixVQUFLLE1BQXFCLEVBQUUsaUJBQTJCLEVBQUUsTUFBWTtRQUFyRSxpQkEwQkM7UUF6QkMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBWTtZQUM5QixJQUFNLGVBQWUsR0FBb0IsS0FBSSxDQUFDLHlCQUF5QixDQUFDLE1BQU0sQ0FBQztnQkFDN0UsYUFBYSxFQUFFLG1DQUFpQjthQUNqQyxDQUFDLENBQUM7WUFDSCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNuQyxLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFdkIsSUFBTSxLQUFLLEdBQXNCLGVBQWUsQ0FBQyxRQUFRLENBQUM7WUFDMUQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtnQkFDOUIsT0FBTyxDQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDakQsTUFBTSxDQUFDLEtBQUssQ0FBQztpQkFDZCxDQUFDLENBQ0gsQ0FBQzthQUNILEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUVuQixLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO2dCQUM5QixJQUFJLEtBQUssR0FBVyxLQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDMUQsRUFBRSxDQUFBLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2QsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFDOUIsS0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM5QixLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7aUJBQ3hCO2FBQ0YsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3BCLENBQUMsQ0FBQztLQUNKO0lBRUQseUNBQUssR0FBTCxVQUFNLEtBQXdCLEVBQUUsaUJBQTJCLEVBQUUsTUFBWTtRQUN2RSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUMvQztJQUVELDRDQUFRLEdBQVI7UUFDRSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ2xCLEdBQUcsQ0FBQyxVQUFDLEtBQXNCO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQy9CLENBQUMsQ0FDTCxDQUFDLElBQUksQ0FBQyxjQUFNLE9BQUEsS0FBSyxDQUFDLEVBQU4sQ0FBTSxDQUFDLENBQUM7S0FDdEI7SUFFTyxtREFBZSxHQUF2QjtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDcEU7O2dCQTFFRixnQkFBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxZQUFZO29CQUN0QixRQUFRLEVBQUUsdURBRVQ7aUJBQ0Y7Ozs7Z0JBZHNCLG1DQUFlO2dCQUhjLDBDQUFzQjtnQkFGN0QsaUJBQVU7OztvQ0FzQnBCLGdCQUFTLFNBQUMsaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQWdCLEVBQUU7O29DQXZCMUQ7O0FBcUJhLDhEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4RE9NQ29tcG9uZW50Q29udGFpbmVyLCBOZ3hET01Db21wb25lbnQsIE5neERPTUNvbXBvbmVudFNlcnZpY2UgfSBmcm9tICduZ3gtZG9tLWNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQgeyBOZ3hQb3B1cENvbXBvbmVudCB9IGZyb20gJy4vcG9wdXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgSVBvcHVwQ29uZmlnLCBOZ3hQb3B1cFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9uZ3gtcG9wdXAuc2VydmljZSc7XHJcblxyXG4vLyA8bmd4LXBvcHVwXHJcbi8vICpuZ0Zvcj1cImxldCBwb3B1cElkIG9mIHBvcHVwSWRzO1wiXHJcbi8vIChwb3B1cFJlYWR5KT1cIm9uUG9wdXBSZWFkeSgkZXZlbnQpXCJcclxuLy8gKHBvcHVwQ2xvc2VkKT1cIm9uUG9wdXBDbG9zZWQoJGV2ZW50KVwiXHJcbi8vICAgW3BvcHVwSWRdPVwicG9wdXBJZFwiXHJcbi8vICAgPjwvbmd4LXBvcHVwPlxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcG9wdXBzJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICA8bmctdGVtcGxhdGUgI3BvcHVwc0NvbnRhaW5lcj48L25nLXRlbXBsYXRlPlxyXG4gIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFBvcHVwc01hbmFnZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQFZpZXdDaGlsZCgncG9wdXBzQ29udGFpbmVyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pXHJcbiAgcHVibGljIHBvcHVwc0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZjtcclxuXHJcbiAgcHJpdmF0ZSBfcG9wdXBzOiBOZ3hET01Db21wb25lbnRbXTtcclxuICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBwcml2YXRlIF9uZ3hET01Db21wb25lbnRDb250YWluZXI6IE5neERPTUNvbXBvbmVudENvbnRhaW5lcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb3B1cFNlcnZpY2U6IE5neFBvcHVwU2VydmljZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIG5neERPTUNvbXBvbmVudFNlcnZpY2U6IE5neERPTUNvbXBvbmVudFNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5fcG9wdXBzID0gW107XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50LmlkKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuaWQgPSAncG9wdXBzLW1hbmFnZXItJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlMTApLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBvcHVwU2VydmljZS5yZWdpc3Rlck1hbmFnZXIodGhpcy5fZWxlbWVudC5pZCwgdGhpcyk7XHJcbiAgICB0aGlzLmNoZWNrVmlzaWJpbGl0eSgpO1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgdGhpcy5fbmd4RE9NQ29tcG9uZW50Q29udGFpbmVyID0gdGhpcy5uZ3hET01Db21wb25lbnRTZXJ2aWNlLmNyZWF0ZUNvbnRhaW5lcih0aGlzLnBvcHVwc0NvbnRhaW5lcik7XHJcbiAgfVxyXG5cclxuICBvcGVuKGNvbmZpZz86IElQb3B1cENvbmZpZywgd2FpdFRyYW5zaXRpb25FbmQ/OiBib29sZWFuLCBkZXRhaWw/OiBhbnkpOiBQcm9taXNlPE5neFBvcHVwQ29tcG9uZW50PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmU6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBuZ3hET01Db21wb25lbnQ6IE5neERPTUNvbXBvbmVudCA9IHRoaXMuX25neERPTUNvbXBvbmVudENvbnRhaW5lci5jcmVhdGUoe1xyXG4gICAgICAgIGNvbXBvbmVudFR5cGU6IE5neFBvcHVwQ29tcG9uZW50XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9wb3B1cHMucHVzaChuZ3hET01Db21wb25lbnQpO1xyXG4gICAgICB0aGlzLmNoZWNrVmlzaWJpbGl0eSgpO1xyXG5cclxuICAgICAgY29uc3QgcG9wdXA6IE5neFBvcHVwQ29tcG9uZW50ID0gbmd4RE9NQ29tcG9uZW50Lmluc3RhbmNlO1xyXG4gICAgICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKCdyZWFkeScsICgpID0+IHtcclxuICAgICAgICByZXNvbHZlKFxyXG4gICAgICAgICAgcG9wdXAub3Blbihjb25maWcsIHdhaXRUcmFuc2l0aW9uRW5kLCBkZXRhaWwpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcG9wdXA7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gdGhpcy5fcG9wdXBzLmluZGV4T2Yobmd4RE9NQ29tcG9uZW50KTtcclxuICAgICAgICBpZihpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLl9wb3B1cHNbaW5kZXhdLmRlc3Ryb3koKTtcclxuICAgICAgICAgIHRoaXMuX3BvcHVwcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgdGhpcy5jaGVja1Zpc2liaWxpdHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UocG9wdXA6IE5neFBvcHVwQ29tcG9uZW50LCB3YWl0VHJhbnNpdGlvbkVuZD86IGJvb2xlYW4sIGRldGFpbD86IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHBvcHVwLmNsb3NlKHdhaXRUcmFuc2l0aW9uRW5kLCBkZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VBbGwoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXHJcbiAgICAgIHRoaXMuX3BvcHVwcy5zbGljZSgwKSAgLy8gY2xvbmUgdG8gYXZvaWQgcmVtb3ZpbmcgcG9wdXBzIGJlZm9yZSBmaW5pc2hpbmdcclxuICAgICAgICAubWFwKChwb3B1cDogTmd4RE9NQ29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcG9wdXAuaW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICB9KVxyXG4gICAgKS50aGVuKCgpID0+IHZvaWQgMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrVmlzaWJpbGl0eSgpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgndmlzaWJsZScsIHRoaXMuX3BvcHVwcy5sZW5ndGggPiAwKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
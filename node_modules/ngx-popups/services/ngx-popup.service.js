"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var NgxPopupService = /** @class */ (function () {
    function NgxPopupService() {
        this.managers = new Map();
    }
    NgxPopupService.prototype.registerManager = function (id, manager) {
        if (this.managers.get(id)) {
            throw new Error("Duplicate manager id: " + id);
        }
        this.managers.set(id, manager);
    };
    /**
     * Opens a new popup and inject a component inside.
     *
     * @param config - config of the component to inject
     * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
     * @param detail - provide data to the 'detail' property of the custom event 'open'
     * @param managerId - in case of many managers, you can provide a specific manager id
     * @returns {Promise<NgxPopupComponent>} - promise resolved when the popup is opened
     */
    /**
       * Opens a new popup and inject a component inside.
       *
       * @param config - config of the component to inject
       * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
       * @param detail - provide data to the 'detail' property of the custom event 'open'
       * @param managerId - in case of many managers, you can provide a specific manager id
       * @returns {Promise<NgxPopupComponent>} - promise resolved when the popup is opened
       */
    NgxPopupService.prototype.open = /**
       * Opens a new popup and inject a component inside.
       *
       * @param config - config of the component to inject
       * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
       * @param detail - provide data to the 'detail' property of the custom event 'open'
       * @param managerId - in case of many managers, you can provide a specific manager id
       * @returns {Promise<NgxPopupComponent>} - promise resolved when the popup is opened
       */
    function (config, waitTransitionEnd, detail, managerId) {
        if (waitTransitionEnd === void 0) { waitTransitionEnd = true; }
        return this.getManager(managerId).open(config, waitTransitionEnd, detail);
    };
    /**
     * Closes a popup.
     *
     * @param popup - the popup to close
     * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
     * @param detail - provide data to the 'detail' property of the custom event 'open'
     * @returns {Promise<void>} - promise resolved when the popup is closed
     */
    /**
       * Closes a popup.
       *
       * @param popup - the popup to close
       * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
       * @param detail - provide data to the 'detail' property of the custom event 'open'
       * @returns {Promise<void>} - promise resolved when the popup is closed
       */
    NgxPopupService.prototype.close = /**
       * Closes a popup.
       *
       * @param popup - the popup to close
       * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
       * @param detail - provide data to the 'detail' property of the custom event 'open'
       * @returns {Promise<void>} - promise resolved when the popup is closed
       */
    function (popup, waitTransitionEnd, detail) {
        if (waitTransitionEnd === void 0) { waitTransitionEnd = true; }
        return popup.close(waitTransitionEnd, detail);
    };
    /**
     * Closes all popups.
     *
     * @param managerId
     * @returns {Promise<void>} - promise resolved when all popups are closed.
     */
    /**
       * Closes all popups.
       *
       * @param managerId
       * @returns {Promise<void>} - promise resolved when all popups are closed.
       */
    NgxPopupService.prototype.closeAll = /**
       * Closes all popups.
       *
       * @param managerId
       * @returns {Promise<void>} - promise resolved when all popups are closed.
       */
    function (managerId) {
        return this.getManager(managerId).closeAll();
    };
    NgxPopupService.prototype.getManager = function (id) {
        var manager;
        if (id === void 0) {
            if (this.managers.size > 0) {
                manager = this.managers.values().next().value;
            }
            else {
                throw new Error("No manager for PopupService");
            }
        }
        else if (typeof id === 'string') {
            manager = this.managers.get(id);
            if (manager === void 0) {
                throw new Error("Invalid manager id: " + id);
            }
        }
        else {
            throw new TypeError("Expected string or undefined as id");
        }
        return manager;
    };
    NgxPopupService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    NgxPopupService.ctorParameters = function () { return []; };
    return NgxPopupService;
}());
exports.NgxPopupService = NgxPopupService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXBvcHVwLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvc2VydmljZXMvbmd4LXBvcHVwLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7O0lBYXpDO3dCQUYyRCxJQUFJLEdBQUcsRUFBcUM7S0FFdEY7SUFFakIseUNBQWUsR0FBZixVQUFnQixFQUFVLEVBQUUsT0FBa0M7UUFDNUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQXlCLEVBQUksQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDO0lBRUQ7Ozs7Ozs7O09BUUc7Ozs7Ozs7Ozs7SUFDSCw4QkFBSTs7Ozs7Ozs7O0lBQUosVUFBSyxNQUFvQixFQUFFLGlCQUFpQyxFQUFFLE1BQVksRUFBRSxTQUFrQjtRQUFuRSxrQ0FBQSxFQUFBLHdCQUFpQztRQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzNFO0lBRUQ7Ozs7Ozs7T0FPRzs7Ozs7Ozs7O0lBQ0gsK0JBQUs7Ozs7Ozs7O0lBQUwsVUFBTSxLQUF3QixFQUFFLGlCQUFpQyxFQUFFLE1BQVk7UUFBL0Msa0NBQUEsRUFBQSx3QkFBaUM7UUFDL0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDL0M7SUFFRDs7Ozs7T0FLRzs7Ozs7OztJQUNILGtDQUFROzs7Ozs7SUFBUixVQUFTLFNBQWtCO1FBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzlDO0lBR1Msb0NBQVUsR0FBcEIsVUFBcUIsRUFBVztRQUM5QixJQUFJLE9BQWtDLENBQUM7UUFDdkMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDL0M7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7YUFDaEQ7U0FDRjtRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF1QixFQUFJLENBQUMsQ0FBQzthQUM5QztTQUNGO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLElBQUksU0FBUyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0tBQ2hCOztnQkFwRUYsaUJBQVU7Ozs7MEJBUlg7O0FBU2EsMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neFBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9wb3B1cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQb3B1cHNNYW5hZ2VyQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9wb3B1cHNNYW5hZ2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neERPTUNvbXBvbmVudE9wdGlvbnMgfSBmcm9tICduZ3gtZG9tLWNvbXBvbmVudCc7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUG9wdXBDb25maWcgZXh0ZW5kcyBOZ3hET01Db21wb25lbnRPcHRpb25zIHsgfVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4UG9wdXBTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBtYW5hZ2VyczogTWFwPHN0cmluZywgTmd4UG9wdXBzTWFuYWdlckNvbXBvbmVudD4gPSBuZXcgTWFwPHN0cmluZywgTmd4UG9wdXBzTWFuYWdlckNvbXBvbmVudD4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgcmVnaXN0ZXJNYW5hZ2VyKGlkOiBzdHJpbmcsIG1hbmFnZXI6IE5neFBvcHVwc01hbmFnZXJDb21wb25lbnQpIHtcclxuICAgIGlmICh0aGlzLm1hbmFnZXJzLmdldChpZCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgbWFuYWdlciBpZDogJHtpZH1gKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm1hbmFnZXJzLnNldChpZCwgbWFuYWdlcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBPcGVucyBhIG5ldyBwb3B1cCBhbmQgaW5qZWN0IGEgY29tcG9uZW50IGluc2lkZS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb25maWcgLSBjb25maWcgb2YgdGhlIGNvbXBvbmVudCB0byBpbmplY3RcclxuICAgKiBAcGFyYW0gd2FpdFRyYW5zaXRpb25FbmQgLSAoZGVmYXVsdCB0cnVlKSBpZiB0cnVlIHdhaXQgdGhlIGVuZCBvZiB0aGUgYW5pbWF0aW9uIGJlZm9yZSB0cmlnZ2VyaW5nIG9wZW4vcmVzb2x2aW5nIHByb21pc2UuXHJcbiAgICogQHBhcmFtIGRldGFpbCAtIHByb3ZpZGUgZGF0YSB0byB0aGUgJ2RldGFpbCcgcHJvcGVydHkgb2YgdGhlIGN1c3RvbSBldmVudCAnb3BlbidcclxuICAgKiBAcGFyYW0gbWFuYWdlcklkIC0gaW4gY2FzZSBvZiBtYW55IG1hbmFnZXJzLCB5b3UgY2FuIHByb3ZpZGUgYSBzcGVjaWZpYyBtYW5hZ2VyIGlkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8Tmd4UG9wdXBDb21wb25lbnQ+fSAtIHByb21pc2UgcmVzb2x2ZWQgd2hlbiB0aGUgcG9wdXAgaXMgb3BlbmVkXHJcbiAgICovXHJcbiAgb3Blbihjb25maWc6IElQb3B1cENvbmZpZywgd2FpdFRyYW5zaXRpb25FbmQ6IGJvb2xlYW4gPSB0cnVlLCBkZXRhaWw/OiBhbnksIG1hbmFnZXJJZD86IHN0cmluZyk6IFByb21pc2U8Tmd4UG9wdXBDb21wb25lbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLmdldE1hbmFnZXIobWFuYWdlcklkKS5vcGVuKGNvbmZpZywgd2FpdFRyYW5zaXRpb25FbmQsIGRldGFpbCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZXMgYSBwb3B1cC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwb3B1cCAtIHRoZSBwb3B1cCB0byBjbG9zZVxyXG4gICAqIEBwYXJhbSB3YWl0VHJhbnNpdGlvbkVuZCAtIChkZWZhdWx0IHRydWUpIGlmIHRydWUgd2FpdCB0aGUgZW5kIG9mIHRoZSBhbmltYXRpb24gYmVmb3JlIHRyaWdnZXJpbmcgb3Blbi9yZXNvbHZpbmcgcHJvbWlzZS5cclxuICAgKiBAcGFyYW0gZGV0YWlsIC0gcHJvdmlkZSBkYXRhIHRvIHRoZSAnZGV0YWlsJyBwcm9wZXJ0eSBvZiB0aGUgY3VzdG9tIGV2ZW50ICdvcGVuJ1xyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fSAtIHByb21pc2UgcmVzb2x2ZWQgd2hlbiB0aGUgcG9wdXAgaXMgY2xvc2VkXHJcbiAgICovXHJcbiAgY2xvc2UocG9wdXA6IE5neFBvcHVwQ29tcG9uZW50LCB3YWl0VHJhbnNpdGlvbkVuZDogYm9vbGVhbiA9IHRydWUsIGRldGFpbD86IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIHBvcHVwLmNsb3NlKHdhaXRUcmFuc2l0aW9uRW5kLCBkZXRhaWwpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2xvc2VzIGFsbCBwb3B1cHMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gbWFuYWdlcklkXHJcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IC0gcHJvbWlzZSByZXNvbHZlZCB3aGVuIGFsbCBwb3B1cHMgYXJlIGNsb3NlZC5cclxuICAgKi9cclxuICBjbG9zZUFsbChtYW5hZ2VySWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiB0aGlzLmdldE1hbmFnZXIobWFuYWdlcklkKS5jbG9zZUFsbCgpO1xyXG4gIH1cclxuXHJcblxyXG4gIHByb3RlY3RlZCBnZXRNYW5hZ2VyKGlkPzogc3RyaW5nKTogTmd4UG9wdXBzTWFuYWdlckNvbXBvbmVudCB7XHJcbiAgICBsZXQgbWFuYWdlcjogTmd4UG9wdXBzTWFuYWdlckNvbXBvbmVudDtcclxuICAgIGlmIChpZCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgIGlmICh0aGlzLm1hbmFnZXJzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgbWFuYWdlciA9IHRoaXMubWFuYWdlcnMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWFuYWdlciBmb3IgUG9wdXBTZXJ2aWNlYCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xyXG4gICAgICBtYW5hZ2VyID0gdGhpcy5tYW5hZ2Vycy5nZXQoaWQpO1xyXG4gICAgICBpZiAobWFuYWdlciA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1hbmFnZXIgaWQ6ICR7aWR9YCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHN0cmluZyBvciB1bmRlZmluZWQgYXMgaWRgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtYW5hZ2VyO1xyXG4gIH1cclxuXHJcbn1cclxuIl19
import { NgxPopupComponent } from '../components/popup.component';
import { NgxPopupsManagerComponent } from '../components/popupsManager.component';
import { NgxDOMComponentOptions } from 'ngx-dom-component';
export interface IPopupConfig extends NgxDOMComponentOptions {
}
export declare class NgxPopupService {
    private managers;
    constructor();
    registerManager(id: string, manager: NgxPopupsManagerComponent): void;
    /**
     * Opens a new popup and inject a component inside.
     *
     * @param config - config of the component to inject
     * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
     * @param detail - provide data to the 'detail' property of the custom event 'open'
     * @param managerId - in case of many managers, you can provide a specific manager id
     * @returns {Promise<NgxPopupComponent>} - promise resolved when the popup is opened
     */
    open(config: IPopupConfig, waitTransitionEnd?: boolean, detail?: any, managerId?: string): Promise<NgxPopupComponent>;
    /**
     * Closes a popup.
     *
     * @param popup - the popup to close
     * @param waitTransitionEnd - (default true) if true wait the end of the animation before triggering open/resolving promise.
     * @param detail - provide data to the 'detail' property of the custom event 'open'
     * @returns {Promise<void>} - promise resolved when the popup is closed
     */
    close(popup: NgxPopupComponent, waitTransitionEnd?: boolean, detail?: any): Promise<void>;
    /**
     * Closes all popups.
     *
     * @param managerId
     * @returns {Promise<void>} - promise resolved when all popups are closed.
     */
    closeAll(managerId?: string): Promise<void>;
    protected getManager(id?: string): NgxPopupsManagerComponent;
}

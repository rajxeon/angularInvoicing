export declare type PromiseStatus = 'resolved' | 'rejected' | 'pending';
export declare class DeferredPromise<T = any> {
    static RESOLVED: string;
    static REJECTED: string;
    static PENDING: string;
    static resolve<T>(value?: T): DeferredPromise<T>;
    static reject<T>(reason: any): DeferredPromise<T>;
    private _promise;
    private _resolve;
    private _reject;
    private _status;
    constructor(callback?: (deferred: DeferredPromise<T>) => any);
    readonly status: PromiseStatus;
    readonly promise: Promise<T>;
    resolve(value?: T): void;
    reject(reason: any): void;
    then<A = any>(onFulfilled: ((result: T) => A), onRejected?: ((reason: any) => A)): DeferredPromise<A>;
    catch<A = any>(onRejected: ((reason: any) => A)): DeferredPromise<A | T>;
}

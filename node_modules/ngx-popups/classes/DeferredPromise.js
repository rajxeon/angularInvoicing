"use strict";
// 08/06/2017
Object.defineProperty(exports, "__esModule", { value: true });
var DeferredPromise = /** @class */ (function () {
    function DeferredPromise(callback) {
        var _this = this;
        this._status = DeferredPromise.PENDING;
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
            if (callback !== void 0) {
                callback.call(_this, _this);
            }
        }).then(function (value) {
            _this._status = DeferredPromise.RESOLVED;
            return value;
        }, function (error) {
            _this._status = DeferredPromise.REJECTED;
            throw error;
        });
    }
    DeferredPromise.resolve = function (value) {
        var promise = new DeferredPromise();
        promise.resolve(value);
        return promise;
    };
    DeferredPromise.reject = function (reason) {
        var promise = new DeferredPromise();
        promise.reject(reason);
        return promise;
    };
    Object.defineProperty(DeferredPromise.prototype, "status", {
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeferredPromise.prototype, "promise", {
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    DeferredPromise.prototype.resolve = function (value) {
        if (this._status === DeferredPromise.PENDING) {
            this._resolve(value);
        }
        else {
            throw new TypeError('promise already resolved/rejected');
        }
    };
    DeferredPromise.prototype.reject = function (reason) {
        if (this._status === DeferredPromise.PENDING) {
            this._reject(reason);
        }
        else {
            throw new TypeError('promise already resolved/rejected');
        }
    };
    DeferredPromise.prototype.then = function (onFulfilled, onRejected) {
        var _this = this;
        return new DeferredPromise(function (deferred) {
            _this._promise.then(function (result) {
                try {
                    deferred.resolve(onFulfilled(result));
                }
                catch (error) {
                    deferred.reject(error);
                }
            }, function (reason) {
                if (onRejected === void 0) {
                    deferred.reject(reason);
                }
                else {
                    try {
                        deferred.resolve(onRejected(reason));
                    }
                    catch (error) {
                        deferred.reject(error);
                    }
                }
            });
        });
    };
    DeferredPromise.prototype.catch = function (onRejected) {
        var _this = this;
        return new DeferredPromise(function (deferred) {
            _this._promise.then(function (result) {
                deferred.resolve(result);
            }, function (reason) {
                try {
                    deferred.resolve(onRejected(reason));
                }
                catch (error) {
                    deferred.reject(error);
                }
            });
        });
    };
    DeferredPromise.RESOLVED = 'resolved';
    DeferredPromise.REJECTED = 'rejected';
    DeferredPromise.PENDING = 'pending';
    return DeferredPromise;
}());
exports.DeferredPromise = DeferredPromise;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmZXJyZWRQcm9taXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2NsYXNzZXMvRGVmZXJyZWRQcm9taXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7SUE0QkUseUJBQVksUUFBZ0Q7UUFBNUQsaUJBZUM7UUFkQyxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxPQUF3QixDQUFDO1FBRXhELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxPQUFPLENBQUksVUFBQyxPQUFZLEVBQUUsTUFBVztZQUN2RCxLQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUV0QixFQUFFLENBQUEsQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxFQUFFLEtBQUksQ0FBQyxDQUFDO2FBQUU7U0FDdkQsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQVE7WUFDZixLQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxRQUF5QixDQUFDO1lBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDZCxFQUFFLFVBQUMsS0FBVTtZQUNaLEtBQUksQ0FBQyxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQXlCLENBQUM7WUFDekQsTUFBTSxLQUFLLENBQUM7U0FDYixDQUFDLENBQUM7S0FDSjtJQWpDTSx1QkFBTyxHQUFkLFVBQWtCLEtBQVM7UUFDekIsSUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLEVBQUssQ0FBQztRQUN6QyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDaEI7SUFFTSxzQkFBTSxHQUFiLFVBQWlCLE1BQVc7UUFDMUIsSUFBTSxPQUFPLEdBQUcsSUFBSSxlQUFlLEVBQUssQ0FBQztRQUN6QyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUM7S0FDaEI7SUF5QkQsc0JBQUksbUNBQU07YUFBVjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3JCOzs7T0FBQTtJQUVELHNCQUFJLG9DQUFPO2FBQVg7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN0Qjs7O09BQUE7SUFFRCxpQ0FBTyxHQUFQLFVBQVEsS0FBUztRQUNmLEVBQUUsQ0FBQSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN0QjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQzFEO0tBQ0Y7SUFFRCxnQ0FBTSxHQUFOLFVBQU8sTUFBVztRQUNoQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sSUFBSSxTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUMxRDtLQUNGO0lBRUQsOEJBQUksR0FBSixVQUFjLFdBQStCLEVBQUUsVUFBaUM7UUFBaEYsaUJBb0JDO1FBbkJDLE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBSSxVQUFDLFFBQTRCO1lBQ3pELEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUMsTUFBUztnQkFDM0IsSUFBSSxDQUFDO29CQUNILFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQ3ZDO2dCQUFDLEtBQUssQ0FBQSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0YsRUFBRSxVQUFDLE1BQVc7Z0JBQ2IsRUFBRSxDQUFBLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekI7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sSUFBSSxDQUFDO3dCQUNILFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ3RDO29CQUFDLEtBQUssQ0FBQSxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3hCO2lCQUNGO2FBQ0YsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO0tBQ0o7SUFFRCwrQkFBSyxHQUFMLFVBQWUsVUFBZ0M7UUFBL0MsaUJBWUM7UUFYQyxNQUFNLENBQUMsSUFBSSxlQUFlLENBQVEsVUFBQyxRQUFnQztZQUNqRSxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFDLE1BQVM7Z0JBQzNCLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDMUIsRUFBQyxVQUFDLE1BQVc7Z0JBQ1osSUFBSSxDQUFDO29CQUNILFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQ3RDO2dCQUFDLEtBQUssQ0FBQSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3hCO2FBQ0YsQ0FBQyxDQUFDO1NBQ0osQ0FBQyxDQUFDO0tBQ0o7K0JBakd5QixVQUFVOytCQUNWLFVBQVU7OEJBQ1gsU0FBUzswQkFScEM7O0FBSWEsMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAwOC8wNi8yMDE3XHJcblxyXG5leHBvcnQgdHlwZSBQcm9taXNlU3RhdHVzID0gJ3Jlc29sdmVkJyB8ICdyZWplY3RlZCcgfCAncGVuZGluZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmZXJyZWRQcm9taXNlPFQgPSBhbnk+IHtcclxuXHJcbiAgc3RhdGljIFJFU09MVkVEOiBzdHJpbmcgPSAncmVzb2x2ZWQnO1xyXG4gIHN0YXRpYyBSRUpFQ1RFRDogc3RyaW5nID0gJ3JlamVjdGVkJztcclxuICBzdGF0aWMgUEVORElORzogc3RyaW5nID0gJ3BlbmRpbmcnO1xyXG5cclxuICBzdGF0aWMgcmVzb2x2ZTxUPih2YWx1ZT86IFQpOiBEZWZlcnJlZFByb21pc2U8VD4ge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBEZWZlcnJlZFByb21pc2U8VD4oKTtcclxuICAgIHByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWplY3Q8VD4ocmVhc29uOiBhbnkpOiBEZWZlcnJlZFByb21pc2U8VD4ge1xyXG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBEZWZlcnJlZFByb21pc2U8VD4oKTtcclxuICAgIHByb21pc2UucmVqZWN0KHJlYXNvbik7XHJcbiAgICByZXR1cm4gcHJvbWlzZTtcclxuICB9XHJcblxyXG5cclxuICBwcml2YXRlIF9wcm9taXNlOiBQcm9taXNlPFQ+O1xyXG4gIHByaXZhdGUgX3Jlc29sdmU6ICgodmFsdWU6IFQpID0+IGFueSk7XHJcbiAgcHJpdmF0ZSBfcmVqZWN0OiAoKGVycm9yOiBhbnkpID0+IGFueSk7XHJcbiAgcHJpdmF0ZSBfc3RhdHVzOiBQcm9taXNlU3RhdHVzO1xyXG5cclxuICBjb25zdHJ1Y3RvcihjYWxsYmFjaz86IChkZWZlcnJlZDogRGVmZXJyZWRQcm9taXNlPFQ+KSA9PiBhbnkpIHtcclxuICAgIHRoaXMuX3N0YXR1cyA9IERlZmVycmVkUHJvbWlzZS5QRU5ESU5HIGFzIFByb21pc2VTdGF0dXM7XHJcblxyXG4gICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlPFQ+KChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICB0aGlzLl9yZWplY3QgPSByZWplY3Q7XHJcblxyXG4gICAgICBpZihjYWxsYmFjayAhPT0gdm9pZCAwKSB7IGNhbGxiYWNrLmNhbGwodGhpcywgdGhpcyk7IH1cclxuICAgIH0pLnRoZW4oKHZhbHVlOiBUKSA9PiB7XHJcbiAgICAgIHRoaXMuX3N0YXR1cyA9IERlZmVycmVkUHJvbWlzZS5SRVNPTFZFRCBhcyBQcm9taXNlU3RhdHVzO1xyXG4gICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9LCAoZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLl9zdGF0dXMgPSBEZWZlcnJlZFByb21pc2UuUkVKRUNURUQgYXMgUHJvbWlzZVN0YXR1cztcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldCBzdGF0dXMoKTogUHJvbWlzZVN0YXR1cyB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHByb21pc2UoKTogUHJvbWlzZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcclxuICB9XHJcblxyXG4gIHJlc29sdmUodmFsdWU/OiBUKTogdm9pZCB7XHJcbiAgICBpZih0aGlzLl9zdGF0dXMgPT09IERlZmVycmVkUHJvbWlzZS5QRU5ESU5HKSB7XHJcbiAgICAgIHRoaXMuX3Jlc29sdmUodmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJvbWlzZSBhbHJlYWR5IHJlc29sdmVkL3JlamVjdGVkJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWplY3QocmVhc29uOiBhbnkpOiB2b2lkIHtcclxuICAgIGlmKHRoaXMuX3N0YXR1cyA9PT0gRGVmZXJyZWRQcm9taXNlLlBFTkRJTkcpIHtcclxuICAgICAgdGhpcy5fcmVqZWN0KHJlYXNvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm9taXNlIGFscmVhZHkgcmVzb2x2ZWQvcmVqZWN0ZWQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoZW48QSA9IGFueT4ob25GdWxmaWxsZWQ6ICgocmVzdWx0OiBUKSA9PiBBKSwgb25SZWplY3RlZD86ICgocmVhc29uOiBhbnkpID0+IEEpKTogRGVmZXJyZWRQcm9taXNlPEE+IHtcclxuICAgIHJldHVybiBuZXcgRGVmZXJyZWRQcm9taXNlPEE+KChkZWZlcnJlZDogRGVmZXJyZWRQcm9taXNlPEE+KSA9PiB7XHJcbiAgICAgIHRoaXMuX3Byb21pc2UudGhlbigocmVzdWx0OiBUKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUob25GdWxmaWxsZWQocmVzdWx0KSk7XHJcbiAgICAgICAgfSBjYXRjaChlcnJvcikge1xyXG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIChyZWFzb246IGFueSkgPT4ge1xyXG4gICAgICAgIGlmKG9uUmVqZWN0ZWQgPT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUob25SZWplY3RlZChyZWFzb24pKTtcclxuICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcclxuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjYXRjaDxBID0gYW55PihvblJlamVjdGVkOiAoKHJlYXNvbjogYW55KSA9PiBBKSk6IERlZmVycmVkUHJvbWlzZTxBIHwgVD4ge1xyXG4gICAgcmV0dXJuIG5ldyBEZWZlcnJlZFByb21pc2U8QSB8IFQ+KChkZWZlcnJlZDogRGVmZXJyZWRQcm9taXNlPEEgfCBUPikgPT4ge1xyXG4gICAgICB0aGlzLl9wcm9taXNlLnRoZW4oKHJlc3VsdDogVCkgPT4ge1xyXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSwocmVhc29uOiBhbnkpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShvblJlamVjdGVkKHJlYXNvbikpO1xyXG4gICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcclxuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19
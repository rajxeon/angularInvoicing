import { Component, ComponentFactoryResolver, ViewContainerRef, ViewChild } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { fromPromise } from 'rxjs/observable/fromPromise';
import { of } from 'rxjs/observable/of';
import { delay } from 'rxjs/operators';
/**
 * Modal dialog component
 */
var ModalDialogComponent = (function () {
    /**
     * CTOR
     * @param componentFactoryResolver
     */
    function ModalDialogComponent(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        /** Modal dialog style settings */
        this.settings = {
            overlayClass: 'modal-backdrop fade',
            overlayAnimationTriggerClass: 'show',
            modalClass: 'modal ngx-modal fade',
            modalAnimationTriggerClass: 'show',
            modalDialogClass: 'modal-dialog modal-dialog-centered',
            contentClass: 'modal-content',
            headerClass: 'modal-header',
            headerTitleClass: 'modal-title',
            closeButtonClass: 'close glyphicon glyphicon-remove',
            closeButtonTitle: 'CLOSE',
            bodyClass: 'modal-body',
            footerClass: 'modal-footer',
            alertClass: 'ngx-modal-shake',
            alertDuration: 250,
            notifyWithAlert: true,
            buttonClass: 'btn btn-primary'
        };
        this.showAlert = false;
        this.animateOverlayClass = '';
        this.animateModalClass = '';
        this._inProgress = false;
    }
    /**
     * Initialize dialog with reference to instance and options
     * @param reference
     * @param options
     */
    ModalDialogComponent.prototype.dialogInit = function (reference, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this.reference = reference;
        // inject component
        if (options.childComponent) {
            var factory = this.componentFactoryResolver.resolveComponentFactory(options.childComponent);
            var componentRef = this.dynamicComponentTarget.createComponent(factory);
            this._childInstance = componentRef.instance;
            this._closeDialog$ = new Subject();
            this._closeDialog$.subscribe(function () {
                _this._finalizeAndDestroy();
            });
            options.closeDialogSubject = this._closeDialog$;
            this._childInstance['dialogInit'](componentRef, options);
            document.activeElement != null ?
                document.activeElement.blur() :
                document.body.blur();
        }
        // set options
        this._setOptions(options);
    };
    ModalDialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        // a trick to defer css animations
        of(void 0).pipe(delay(0)).subscribe(function () {
            _this.animateOverlayClass = _this.settings.overlayAnimationTriggerClass;
            _this.animateModalClass = _this.settings.modalAnimationTriggerClass;
        });
    };
    /**
     * Cleanup on destroy
     */
    ModalDialogComponent.prototype.ngOnDestroy = function () {
        // run animations
        this.animateOverlayClass = '';
        this.animateModalClass = '';
        // cleanup listeners
        if (this._alertTimeout) {
            clearTimeout(this._alertTimeout);
            this._alertTimeout = null;
        }
        if (this._closeDialog$) {
            this._closeDialog$.unsubscribe();
        }
    };
    /**
     * Run action defined on action button
     * @param action
     */
    ModalDialogComponent.prototype.doAction = function (action) {
        // disable multi clicks
        if (this._inProgress) {
            return;
        }
        this._inProgress = true;
        this._closeIfSuccessful(action);
    };
    /**
     * Method to run on close
     * if action buttons are defined, it will not close
     */
    ModalDialogComponent.prototype.close = function () {
        if (this._inProgress) {
            return;
        }
        if (this.actionButtons && this.actionButtons.length) {
            return;
        }
        this._inProgress = true;
        if (this.onClose) {
            this._closeIfSuccessful(this.onClose);
            return;
        }
        this._finalizeAndDestroy();
    };
    /**
     * Pass options from dialog setup to component
     * @param  {IModalDialogOptions} options?
     */
    ModalDialogComponent.prototype._setOptions = function (options) {
        if (options.onClose && options.actionButtons && options.actionButtons.length) {
            throw new Error("OnClose callback and ActionButtons are not allowed to be defined on the same dialog.");
        }
        // set references
        this.title = (options && options.title) || '';
        this.onClose = (options && options.onClose) || null;
        this.actionButtons = (this._childInstance && this._childInstance['actionButtons']) ||
            (options && options.actionButtons) || null;
        if (options && options.settings) {
            Object.assign(this.settings, options.settings);
        }
    };
    /**
     * Close if successful
     * @param callback
     */
    ModalDialogComponent.prototype._closeIfSuccessful = function (callback) {
        var _this = this;
        if (!callback) {
            return this._finalizeAndDestroy();
        }
        var response = callback();
        if (typeof response === 'boolean') {
            if (response) {
                return this._finalizeAndDestroy();
            }
            return this._triggerAlert();
        }
        if (response instanceof Promise) {
            response = fromPromise(response);
        }
        if (response instanceof Observable) {
            response.subscribe(function () {
                _this._finalizeAndDestroy();
            }, function () {
                _this._triggerAlert();
            });
        }
        else {
            this._inProgress = false;
        }
    };
    ModalDialogComponent.prototype._finalizeAndDestroy = function () {
        this._inProgress = false;
        this.reference.destroy();
    };
    ModalDialogComponent.prototype._triggerAlert = function () {
        var _this = this;
        if (this.settings.notifyWithAlert) {
            this.showAlert = true;
            this._alertTimeout = window.setTimeout(function () {
                _this.showAlert = false;
                _this._inProgress = false;
                clearTimeout(_this._alertTimeout);
                _this._alertTimeout = null;
            }, this.settings.alertDuration);
        }
    };
    return ModalDialogComponent;
}());
export { ModalDialogComponent };
ModalDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'modal-dialog',
                styles: ["\n      @-moz-keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n      @-webkit-keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n      @keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n\n      .ngx-modal {\n        display: flex;\n      }\n      .ngx-modal-shake {\n        backface-visibility: hidden;\n        -webkit-animation-duration: 0.5s;\n        -moz-animation-duration: 0.5s;\n        animation-duration: 0.5s;\n        -webkit-animation-fill-mode: both;\n        -moz-animation-fill-mode: both;\n        animation-fill-mode: both;\n        -webkit-animation-iteration-count: infinite;\n        -moz-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        -webkit-animation-name: shake;\n        -moz-animation-name: shake;\n        animation-name: shake;\n      }\n  "],
                template: "\n    <div *ngIf=\"settings.overlayClass\" [ngClass]=\"[settings.overlayClass, animateOverlayClass]\"\n         (click)=\"(!actionButtons || !actionButtons.length) && close()\"></div>\n    <div [ngClass]=\"[settings.modalClass, animateModalClass]\">\n      <div [ngClass]=\"settings.modalDialogClass\">\n        <div [ngClass]=\"[ showAlert ? settings.alertClass : '', settings.contentClass]\">\n          <div [ngClass]=\"settings.headerClass\">\n            <h4 [ngClass]=\"settings.headerTitleClass\">{{title}}</h4>\n            <button (click)=\"close()\" *ngIf=\"!actionButtons || !actionButtons.length\" type=\"button\"\n                    [title]=\"settings.closeButtonTitle\"\n                    [ngClass]=\"settings.closeButtonClass\">\n            </button>\n          </div>\n          <div [ngClass]=\"settings.bodyClass\">\n            <i #modalDialogBody></i>\n          </div>\n          <div [ngClass]=\"settings.footerClass\" *ngIf=\"actionButtons && actionButtons.length\">\n            <button *ngFor=\"let button of actionButtons\" (click)=\"doAction(button.onAction)\"\n                    [ngClass]=\"button.buttonClass || settings.buttonClass\">{{button.text}}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
            },] },
];
/** @nocollapse */
ModalDialogComponent.ctorParameters = function () { return [
    { type: ComponentFactoryResolver, },
]; };
ModalDialogComponent.propDecorators = {
    'dynamicComponentTarget': [{ type: ViewChild, args: ['modalDialogBody', { read: ViewContainerRef },] },],
};

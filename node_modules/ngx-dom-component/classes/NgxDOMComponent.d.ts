import { ComponentFactoryResolver, ComponentRef, KeyValueDiffer, KeyValueDiffers, SimpleChanges, ViewContainerRef } from '@angular/core';
import { MetadataEntry } from './MetadataEntry';
export interface NgxDOMComponentOptions {
    viewContainerRef?: ViewContainerRef;
    componentType: any;
    inputs?: {
        [key: string]: any;
    };
    outputs?: {
        [key: string]: Function;
    };
    index?: number;
}
/**
 * A NgxDOMComponent represent a angular component in the DOM.
 * It allows simple creation, deletion, and moves in the DOM of the element.
 */
export declare class NgxDOMComponent {
    static componentFactoryResolver: ComponentFactoryResolver;
    static differs: KeyValueDiffers;
    static normalizeNgxDOMComponentOptions(options: NgxDOMComponentOptions): NgxDOMComponentOptions;
    protected _viewContainerRef: ViewContainerRef;
    protected _componentRef: ComponentRef<any>;
    protected _metadata: MetadataEntry[];
    protected _differ: KeyValueDiffer<string, any>;
    constructor(options: NgxDOMComponentOptions);
    /**
     * The angular view on the parent of the element
     * @return {ViewContainerRef}
     */
    readonly viewContainerRef: ViewContainerRef;
    /**
     * The angular component
     * @return {ComponentRef<any>}
     */
    readonly componentRef: ComponentRef<any>;
    /**
     * The constructor of the element
     * @return {ComponentRef<any>}
     */
    readonly componentType: any;
    /**
     * The actual DOM element.
     * @return {HTMLElement}
     */
    readonly element: HTMLElement;
    /**
     * The instance of the constructor
     * @return {any}
     */
    readonly instance: any;
    insert(index?: number, viewContainerRef?: ViewContainerRef): this;
    move(index?: number, viewContainerRef?: ViewContainerRef): this;
    detach(): this;
    destroy(): this;
    getChanges(): SimpleChanges | null;
    detectChanges(): void;
}

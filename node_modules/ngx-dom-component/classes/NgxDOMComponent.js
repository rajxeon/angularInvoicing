"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var MetadataEntry_1 = require("./MetadataEntry");
/**
 * A NgxDOMComponent represent a angular component in the DOM.
 * It allows simple creation, deletion, and moves in the DOM of the element.
 */
var NgxDOMComponent = /** @class */ (function () {
    function NgxDOMComponent(options) {
        options = NgxDOMComponent.normalizeNgxDOMComponentOptions(options);
        this._viewContainerRef = options.viewContainerRef;
        // create the angular component
        this._componentRef = this._viewContainerRef.createComponent(NgxDOMComponent.componentFactoryResolver.resolveComponentFactory(options.componentType), options.index);
        // extract the metadata of the component
        this._metadata = MetadataEntry_1.GetNgxEntryComponentMetaData(options.componentType);
        // create a differ for the instance
        this._differ = NgxDOMComponent.differs
            .find(this._componentRef.instance)
            .create();
        // bind inputs and outputs with the create component's instance
        var metadataEntry;
        for (var i = 0, l = this._metadata.length; i < l; i++) {
            metadataEntry = this._metadata[i];
            switch (metadataEntry.metadataName) {
                case 'Input':
                    if (options.inputs[metadataEntry.propertyName]) {
                        this._componentRef.instance[metadataEntry.propertyName] = options.inputs[metadataEntry.propertyName];
                    }
                    else {
                        console.warn("Missing input '" + metadataEntry.propertyName + "' for " + options.componentType);
                    }
                    break;
                case 'Output':
                    if (typeof options.outputs[metadataEntry.propertyName] === 'function') {
                        this._componentRef.instance[metadataEntry.propertyName].subscribe(options.outputs[metadataEntry.propertyName]);
                    }
                    else {
                        console.warn("Missing output '" + metadataEntry.propertyName + "' for " + options.componentType);
                    }
                    break;
            }
        }
        this.detectChanges();
    }
    NgxDOMComponent.normalizeNgxDOMComponentOptions = function (options) {
        if (typeof options.viewContainerRef !== 'object') {
            throw new Error("Invalid viewContainerRef");
        }
        if (typeof options.componentType !== 'function') {
            throw new Error("Invalid component");
        }
        if (typeof options.inputs !== 'object') {
            options.inputs = {};
        }
        if (typeof options.outputs !== 'object') {
            options.outputs = {};
        }
        if ((typeof options.index !== 'number') || Number.isNaN(options.index)) {
            options.index = void 0;
        }
        return options;
    };
    Object.defineProperty(NgxDOMComponent.prototype, "viewContainerRef", {
        /**
         * The angular view on the parent of the element
         * @return {ViewContainerRef}
         */
        get: /**
           * The angular view on the parent of the element
           * @return {ViewContainerRef}
           */
        function () {
            return this._viewContainerRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "componentRef", {
        /**
         * The angular component
         * @return {ComponentRef<any>}
         */
        get: /**
           * The angular component
           * @return {ComponentRef<any>}
           */
        function () {
            return this._componentRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "componentType", {
        /**
         * The constructor of the element
         * @return {ComponentRef<any>}
         */
        get: /**
           * The constructor of the element
           * @return {ComponentRef<any>}
           */
        function () {
            return this._componentRef.componentType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "element", {
        /**
         * The actual DOM element.
         * @return {HTMLElement}
         */
        get: /**
           * The actual DOM element.
           * @return {HTMLElement}
           */
        function () {
            return this._componentRef.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "instance", {
        /**
         * The instance of the constructor
         * @return {any}
         */
        get: /**
           * The instance of the constructor
           * @return {any}
           */
        function () {
            return this._componentRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    NgxDOMComponent.prototype.insert = function (index, viewContainerRef) {
        if (index === void 0) { index = null; }
        if (viewContainerRef === void 0) { viewContainerRef = this._viewContainerRef; }
        if (typeof index !== 'number') {
            index = this._viewContainerRef.length;
        }
        this._viewContainerRef = viewContainerRef;
        this._viewContainerRef.insert(this._componentRef.hostView, index);
        return this;
    };
    NgxDOMComponent.prototype.move = function (index, viewContainerRef) {
        if (index === void 0) { index = 0; }
        if (viewContainerRef === void 0) { viewContainerRef = this._viewContainerRef; }
        this._viewContainerRef = viewContainerRef;
        this._viewContainerRef.move(this._componentRef.hostView, index);
        return this;
    };
    NgxDOMComponent.prototype.detach = function () {
        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._componentRef.hostView));
        return this;
    };
    NgxDOMComponent.prototype.destroy = function () {
        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));
        return this;
    };
    NgxDOMComponent.prototype.getChanges = function () {
        var _this = this;
        var changes = null;
        var diff = this._differ.diff(this._componentRef.instance);
        if (diff) {
            diff.forEachItem(function (change) {
                var metadataEntry;
                for (var i = 0, l = _this._metadata.length; i < l; i++) {
                    metadataEntry = _this._metadata[i];
                    if ((metadataEntry.propertyName === change.key) && (metadataEntry.metadataName === 'Input')) {
                        // check that metadata exists for this change
                        if (changes === null) {
                            changes = {};
                        }
                        changes[change.key] = new core_1.SimpleChange(change.previousValue, change.currentValue, false);
                        break;
                    }
                }
            });
        }
        return changes;
    };
    NgxDOMComponent.prototype.detectChanges = function () {
        if (typeof this._componentRef.instance.ngOnChanges === 'function') {
            var changes = this.getChanges();
            if (changes) {
                this._componentRef.instance.ngOnChanges(changes);
            }
        }
    };
    NgxDOMComponent.componentFactoryResolver = null;
    NgxDOMComponent.differs = null;
    return NgxDOMComponent;
}());
exports.NgxDOMComponent = NgxDOMComponent;

//# sourceMappingURL=data:application/json;base64,
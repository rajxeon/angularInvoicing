"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONST_PROP_METADATA = '__prop__metadata__';
function SetNgxEntryComponentMetaData(target, metadataEntries) {
    if (!(exports.CONST_PROP_METADATA in target)) {
        Object.defineProperty(target, exports.CONST_PROP_METADATA, {
            value: {},
        });
    }
    var metadataList = target[exports.CONST_PROP_METADATA];
    var metadataEntry;
    for (var i = 0, l = metadataEntries.length; i < l; i++) {
        metadataEntry = metadataEntries[i];
        if (!Array.isArray(metadataList[metadataEntry.propertyName])) {
            metadataList[metadataEntry.propertyName] = [];
        }
        var metadataPropertyList = metadataList[metadataEntry.propertyName];
        // avoid duplicated metaData
        var j = 0, s = metadataPropertyList.length;
        for (; j < s; j++) {
            if (metadataPropertyList[j].ngMetadataName === metadataEntry.metadataName) {
                break;
            }
        }
        if (j === s) {
            metadataPropertyList.push({
                ngMetadataName: metadataEntry.metadataName
            });
        }
    }
}
exports.SetNgxEntryComponentMetaData = SetNgxEntryComponentMetaData;
function GetNgxEntryComponentMetaData(target) {
    var metadataEntries = [];
    var metadataList;
    if ((typeof Reflect !== 'undefined') && (typeof Reflect.getOwnMetadata === 'function')) {
        metadataList = Reflect.getOwnMetadata('propMetadata', target);
        if (metadataList) {
            var _loop_1 = function (propertyName) {
                if (metadataList[propertyName].length > 0) {
                    metadataList[propertyName].forEach(function (metadata) {
                        var metadataName = metadata.toString();
                        if (metadataName.startsWith('@')) {
                            metadataName = metadataName.substring(1);
                        }
                        metadataEntries.push({
                            propertyName: propertyName,
                            metadataName: metadataName
                        });
                    });
                }
            };
            for (var propertyName in metadataList) {
                _loop_1(propertyName);
            }
        }
    }
    metadataList = target['__prop__metadata__'];
    if (metadataList) {
        var _loop_2 = function (propertyName) {
            if (metadataList[propertyName].length > 0) {
                metadataList[propertyName].forEach(function (metadata) {
                    metadataEntries.push({
                        propertyName: propertyName,
                        metadataName: metadata.ngMetadataName
                    });
                });
            }
        };
        for (var propertyName in metadataList) {
            _loop_2(propertyName);
        }
    }
    return metadataEntries;
}
exports.GetNgxEntryComponentMetaData = GetNgxEntryComponentMetaData;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YWRhdGFFbnRyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jbGFzc2VzL01ldGFkYXRhRW50cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBYSxRQUFBLG1CQUFtQixHQUFXLG9CQUFvQjtBQVcvRCxzQ0FBNkMsTUFBVyxFQUFFLGVBQWdDO0lBQ3hGLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQkFBbUIsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsMkJBQW1CLEVBQUU7WUFDakQsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDLENBQUM7S0FDSjtJQUVELElBQU0sWUFBWSxHQUE2QixNQUFNLENBQUMsMkJBQW1CLENBQUMsQ0FBQztJQUUzRSxJQUFJLGFBQTRCLENBQUM7SUFDakMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN2RCxhQUFhLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5DLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdELFlBQVksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQy9DO1FBRUQsSUFBTSxvQkFBb0IsR0FBVSxZQUFZLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDOztRQUc3RSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNsQixFQUFFLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLEtBQUssYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQzFFLEtBQUssQ0FBQzthQUNQO1NBQ0Y7UUFFRCxFQUFFLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLG9CQUFvQixDQUFDLElBQUksQ0FBQztnQkFDeEIsY0FBYyxFQUFFLGFBQWEsQ0FBQyxZQUFZO2FBQzNDLENBQUMsQ0FBQztTQUNKO0tBQ0Y7Q0FDRjtBQWpDRCxvRUFpQ0M7QUFFRCxzQ0FBNkMsTUFBVztJQUN0RCxJQUFNLGVBQWUsR0FBb0IsRUFBRSxDQUFDO0lBQzVDLElBQUksWUFBaUIsQ0FBQztJQUV0QixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sT0FBTyxLQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBUSxPQUFlLENBQUMsY0FBYyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRyxZQUFZLEdBQUksT0FBZSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkUsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztvQ0FDTixZQUFZO2dCQUNwQixFQUFFLENBQUEsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFhO3dCQUMvQyxJQUFJLFlBQVksR0FBVyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7d0JBQy9DLEVBQUUsQ0FBQSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNoQyxZQUFZLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt5QkFDMUM7d0JBQ0QsZUFBZSxDQUFDLElBQUksQ0FBQzs0QkFDbkIsWUFBWSxFQUFFLFlBQVk7NEJBQzFCLFlBQVksRUFBRSxZQUFZO3lCQUMzQixDQUFDLENBQUM7cUJBQ0osQ0FBQyxDQUFDO2lCQUNKOztZQVpILEdBQUcsQ0FBQSxDQUFDLElBQU0sWUFBWSxJQUFJLFlBQVksQ0FBQzt3QkFBN0IsWUFBWTthQWFyQjtTQUNGO0tBQ0Y7SUFFRCxZQUFZLEdBQUcsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDNUMsRUFBRSxDQUFBLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQ0FDTixZQUFZO1lBQ3BCLEVBQUUsQ0FBQSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFFBQWE7b0JBQy9DLGVBQWUsQ0FBQyxJQUFJLENBQUM7d0JBQ25CLFlBQVksRUFBRSxZQUFZO3dCQUMxQixZQUFZLEVBQUUsUUFBUSxDQUFDLGNBQWM7cUJBQ3RDLENBQUMsQ0FBQztpQkFDSixDQUFDLENBQUM7YUFDSjs7UUFSSCxHQUFHLENBQUEsQ0FBQyxJQUFNLFlBQVksSUFBSSxZQUFZLENBQUM7b0JBQTdCLFlBQVk7U0FTckI7S0FDRjtJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUM7Q0FDeEI7QUF2Q0Qsb0VBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IENPTlNUX1BST1BfTUVUQURBVEE6IHN0cmluZyA9ICdfX3Byb3BfX21ldGFkYXRhX18nO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZmlsZSBwcm92aWRlIGZ1bmN0aW9ucyB0aGF0IGFsbG93IHVzZXIgdG8gcmVnaXN0ZXIvcmV0cmlldmUgbWV0YWRhdGEgb24gYW4gYW5ndWxhciBjb21wb25lbnQuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUVudHJ5IHtcclxuICBwcm9wZXJ0eU5hbWU6IHN0cmluZztcclxuICBtZXRhZGF0YU5hbWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNldE5neEVudHJ5Q29tcG9uZW50TWV0YURhdGEodGFyZ2V0OiBhbnksIG1ldGFkYXRhRW50cmllczogTWV0YWRhdGFFbnRyeVtdKTogdm9pZCB7XHJcbiAgaWYgKCEoQ09OU1RfUFJPUF9NRVRBREFUQSBpbiB0YXJnZXQpKSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBDT05TVF9QUk9QX01FVEFEQVRBLCB7XHJcbiAgICAgIHZhbHVlOiB7fSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbWV0YWRhdGFMaXN0OiB7IFtrZXk6IHN0cmluZ106IGFueVtdIH0gPSB0YXJnZXRbQ09OU1RfUFJPUF9NRVRBREFUQV07XHJcblxyXG4gIGxldCBtZXRhZGF0YUVudHJ5OiBNZXRhZGF0YUVudHJ5O1xyXG4gIGZvciAobGV0IGkgPSAwLCBsID0gbWV0YWRhdGFFbnRyaWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgbWV0YWRhdGFFbnRyeSA9IG1ldGFkYXRhRW50cmllc1tpXTtcclxuXHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobWV0YWRhdGFMaXN0W21ldGFkYXRhRW50cnkucHJvcGVydHlOYW1lXSkpIHtcclxuICAgICAgbWV0YWRhdGFMaXN0W21ldGFkYXRhRW50cnkucHJvcGVydHlOYW1lXSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1ldGFkYXRhUHJvcGVydHlMaXN0OiBhbnlbXSA9IG1ldGFkYXRhTGlzdFttZXRhZGF0YUVudHJ5LnByb3BlcnR5TmFtZV07XHJcblxyXG4gICAgLy8gYXZvaWQgZHVwbGljYXRlZCBtZXRhRGF0YVxyXG4gICAgbGV0IGogPSAwLCBzID0gbWV0YWRhdGFQcm9wZXJ0eUxpc3QubGVuZ3RoO1xyXG4gICAgZm9yICg7IGogPCBzOyBqKyspIHtcclxuICAgICAgaWYgKG1ldGFkYXRhUHJvcGVydHlMaXN0W2pdLm5nTWV0YWRhdGFOYW1lID09PSBtZXRhZGF0YUVudHJ5Lm1ldGFkYXRhTmFtZSkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYoaiA9PT0gcykge1xyXG4gICAgICBtZXRhZGF0YVByb3BlcnR5TGlzdC5wdXNoKHtcclxuICAgICAgICBuZ01ldGFkYXRhTmFtZTogbWV0YWRhdGFFbnRyeS5tZXRhZGF0YU5hbWVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gR2V0Tmd4RW50cnlDb21wb25lbnRNZXRhRGF0YSh0YXJnZXQ6IGFueSk6IE1ldGFkYXRhRW50cnlbXSB7XHJcbiAgY29uc3QgbWV0YWRhdGFFbnRyaWVzOiBNZXRhZGF0YUVudHJ5W10gPSBbXTtcclxuICBsZXQgbWV0YWRhdGFMaXN0OiBhbnk7XHJcblxyXG4gIGlmICgodHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnKSAmJiAodHlwZW9mIChSZWZsZWN0IGFzIGFueSkuZ2V0T3duTWV0YWRhdGEgPT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICBtZXRhZGF0YUxpc3QgPSAoUmVmbGVjdCBhcyBhbnkpLmdldE93bk1ldGFkYXRhKCdwcm9wTWV0YWRhdGEnLCB0YXJnZXQpO1xyXG4gICAgaWYobWV0YWRhdGFMaXN0KSB7XHJcbiAgICAgIGZvcihjb25zdCBwcm9wZXJ0eU5hbWUgaW4gbWV0YWRhdGFMaXN0KSB7XHJcbiAgICAgICAgaWYobWV0YWRhdGFMaXN0W3Byb3BlcnR5TmFtZV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgbWV0YWRhdGFMaXN0W3Byb3BlcnR5TmFtZV0uZm9yRWFjaCgobWV0YWRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbWV0YWRhdGFOYW1lOiBzdHJpbmcgPSBtZXRhZGF0YS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBpZihtZXRhZGF0YU5hbWUuc3RhcnRzV2l0aCgnQCcpKSB7XHJcbiAgICAgICAgICAgICAgbWV0YWRhdGFOYW1lID0gbWV0YWRhdGFOYW1lLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtZXRhZGF0YUVudHJpZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsXHJcbiAgICAgICAgICAgICAgbWV0YWRhdGFOYW1lOiBtZXRhZGF0YU5hbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1ldGFkYXRhTGlzdCA9IHRhcmdldFsnX19wcm9wX19tZXRhZGF0YV9fJ107XHJcbiAgaWYobWV0YWRhdGFMaXN0KSB7XHJcbiAgICBmb3IoY29uc3QgcHJvcGVydHlOYW1lIGluIG1ldGFkYXRhTGlzdCkge1xyXG4gICAgICBpZihtZXRhZGF0YUxpc3RbcHJvcGVydHlOYW1lXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgbWV0YWRhdGFMaXN0W3Byb3BlcnR5TmFtZV0uZm9yRWFjaCgobWV0YWRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgbWV0YWRhdGFFbnRyaWVzLnB1c2goe1xyXG4gICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSxcclxuICAgICAgICAgICAgbWV0YWRhdGFOYW1lOiBtZXRhZGF0YS5uZ01ldGFkYXRhTmFtZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBtZXRhZGF0YUVudHJpZXM7XHJcbn1cclxuXHJcbiJdfQ==
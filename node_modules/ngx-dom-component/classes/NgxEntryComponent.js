"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MetadataEntry_1 = require("./MetadataEntry");
/**
 * Decorator which allows user to manually define inputs and outputs
 * @param {NgxEntryComponentOptions} options
 * @return {any}
 * @constructor
 */
function NgxEntryComponent(options) {
    if (options.inputs === void 0) {
        options.inputs = [];
    }
    if (!Array.isArray(options.inputs)) {
        throw new TypeError("Expected string[] as options.inputs");
    }
    if (options.outputs === void 0) {
        options.outputs = [];
    }
    if (!Array.isArray(options.outputs)) {
        throw new TypeError("Expected string[] as options.outputs");
    }
    return function (target) {
        var metadataEntries = [];
        var propertyName;
        for (var i = 0, l = options.inputs.length; i < l; i++) {
            propertyName = options.inputs[i];
            if (typeof propertyName === 'string') {
                metadataEntries.push({
                    propertyName: propertyName,
                    metadataName: 'Input',
                });
            }
            else {
                throw new TypeError("Expected string[] as options.inputs[" + i + "]");
            }
        }
        for (var i = 0, l = options.outputs.length; i < l; i++) {
            propertyName = options.outputs[i];
            if (typeof propertyName === 'string') {
                metadataEntries.push({
                    propertyName: propertyName,
                    metadataName: 'Output',
                });
            }
            else {
                throw new TypeError("Expected string[] as options.outputs[" + i + "]");
            }
        }
        MetadataEntry_1.SetNgxEntryComponentMetaData(target, metadataEntries);
    };
}
exports.NgxEntryComponent = NgxEntryComponent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmd4RW50cnlDb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2xhc3Nlcy9OZ3hFbnRyeUNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE4RTs7Ozs7OztBQWE5RSwyQkFBa0MsT0FBaUM7SUFFakUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDckI7SUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLElBQUksU0FBUyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDNUQ7SUFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztLQUN0QjtJQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxTQUFTLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUM3RDtJQUdELE1BQU0sQ0FBQyxVQUFDLE1BQVc7UUFDakIsSUFBTSxlQUFlLEdBQW9CLEVBQUUsQ0FBQztRQUU1QyxJQUFJLFlBQW9CLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEQsWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsRUFBRSxDQUFBLENBQUMsT0FBTyxZQUFZLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDcEMsZUFBZSxDQUFDLElBQUksQ0FBQztvQkFDbkIsWUFBWSxFQUFFLFlBQVk7b0JBQzFCLFlBQVksRUFBRSxPQUFPO2lCQUN0QixDQUFDLENBQUM7YUFDSjtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sSUFBSSxTQUFTLENBQUMseUNBQXVDLENBQUMsTUFBRyxDQUFDLENBQUM7YUFDbEU7U0FDRjtRQUVELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLEVBQUUsQ0FBQSxDQUFDLE9BQU8sWUFBWSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLGVBQWUsQ0FBQyxJQUFJLENBQUM7b0JBQ25CLFlBQVksRUFBRSxZQUFZO29CQUMxQixZQUFZLEVBQUUsUUFBUTtpQkFDdkIsQ0FBQyxDQUFDO2FBQ0o7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixNQUFNLElBQUksU0FBUyxDQUFDLDBDQUF3QyxDQUFDLE1BQUcsQ0FBQyxDQUFDO2FBQ25FO1NBQ0Y7UUFFRCw0Q0FBNEIsQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDdkQsQ0FBQztDQUNIO0FBakRELDhDQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1ldGFkYXRhRW50cnksIFNldE5neEVudHJ5Q29tcG9uZW50TWV0YURhdGEgfSBmcm9tICcuL01ldGFkYXRhRW50cnknO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOZ3hFbnRyeUNvbXBvbmVudE9wdGlvbnMge1xyXG4gIGlucHV0cz86IHN0cmluZ1tdO1xyXG4gIG91dHB1dHM/OiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciB3aGljaCBhbGxvd3MgdXNlciB0byBtYW51YWxseSBkZWZpbmUgaW5wdXRzIGFuZCBvdXRwdXRzXHJcbiAqIEBwYXJhbSB7Tmd4RW50cnlDb21wb25lbnRPcHRpb25zfSBvcHRpb25zXHJcbiAqIEByZXR1cm4ge2FueX1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gTmd4RW50cnlDb21wb25lbnQob3B0aW9uczogTmd4RW50cnlDb21wb25lbnRPcHRpb25zKTogYW55IHtcclxuXHJcbiAgaWYgKG9wdGlvbnMuaW5wdXRzID09PSB2b2lkIDApIHtcclxuICAgIG9wdGlvbnMuaW5wdXRzID0gW107XHJcbiAgfVxyXG5cclxuICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucy5pbnB1dHMpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBzdHJpbmdbXSBhcyBvcHRpb25zLmlucHV0c2ApO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdGlvbnMub3V0cHV0cyA9PT0gdm9pZCAwKSB7XHJcbiAgICBvcHRpb25zLm91dHB1dHMgPSBbXTtcclxuICB9XHJcblxyXG4gIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLm91dHB1dHMpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBzdHJpbmdbXSBhcyBvcHRpb25zLm91dHB1dHNgKTtcclxuICB9XHJcblxyXG5cclxuICByZXR1cm4gKHRhcmdldDogYW55KTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBtZXRhZGF0YUVudHJpZXM6IE1ldGFkYXRhRW50cnlbXSA9IFtdO1xyXG5cclxuICAgIGxldCBwcm9wZXJ0eU5hbWU6IHN0cmluZztcclxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gb3B0aW9ucy5pbnB1dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgIHByb3BlcnR5TmFtZSA9IG9wdGlvbnMuaW5wdXRzW2ldO1xyXG4gICAgICBpZih0eXBlb2YgcHJvcGVydHlOYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIG1ldGFkYXRhRW50cmllcy5wdXNoKHtcclxuICAgICAgICAgIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLFxyXG4gICAgICAgICAgbWV0YWRhdGFOYW1lOiAnSW5wdXQnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHN0cmluZ1tdIGFzIG9wdGlvbnMuaW5wdXRzWyR7aX1dYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IG9wdGlvbnMub3V0cHV0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgcHJvcGVydHlOYW1lID0gb3B0aW9ucy5vdXRwdXRzW2ldO1xyXG4gICAgICBpZih0eXBlb2YgcHJvcGVydHlOYW1lID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIG1ldGFkYXRhRW50cmllcy5wdXNoKHtcclxuICAgICAgICAgIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLFxyXG4gICAgICAgICAgbWV0YWRhdGFOYW1lOiAnT3V0cHV0JyxcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBzdHJpbmdbXSBhcyBvcHRpb25zLm91dHB1dHNbJHtpfV1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIFNldE5neEVudHJ5Q29tcG9uZW50TWV0YURhdGEodGFyZ2V0LCBtZXRhZGF0YUVudHJpZXMpO1xyXG4gIH07XHJcbn1cclxuIl19
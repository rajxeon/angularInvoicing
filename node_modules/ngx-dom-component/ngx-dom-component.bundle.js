(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['ngx-dom-component'] = {}),global.core));
}(this, (function (exports,core) { 'use strict';

var CONST_PROP_METADATA = '__prop__metadata__';
function SetNgxEntryComponentMetaData(target, metadataEntries) {
    if (!(CONST_PROP_METADATA in target)) {
        Object.defineProperty(target, CONST_PROP_METADATA, {
            value: {},
        });
    }
    var metadataList = target[CONST_PROP_METADATA];
    var metadataEntry;
    for (var i = 0, l = metadataEntries.length; i < l; i++) {
        metadataEntry = metadataEntries[i];
        if (!Array.isArray(metadataList[metadataEntry.propertyName])) {
            metadataList[metadataEntry.propertyName] = [];
        }
        var metadataPropertyList = metadataList[metadataEntry.propertyName];
        // avoid duplicated metaData
        var j = 0, s = metadataPropertyList.length;
        for (; j < s; j++) {
            if (metadataPropertyList[j].ngMetadataName === metadataEntry.metadataName) {
                break;
            }
        }
        if (j === s) {
            metadataPropertyList.push({
                ngMetadataName: metadataEntry.metadataName
            });
        }
    }
}
function GetNgxEntryComponentMetaData(target) {
    var metadataEntries = [];
    var metadataList;
    if ((typeof Reflect !== 'undefined') && (typeof Reflect.getOwnMetadata === 'function')) {
        metadataList = Reflect.getOwnMetadata('propMetadata', target);
        if (metadataList) {
            var _loop_1 = function (propertyName) {
                if (metadataList[propertyName].length > 0) {
                    metadataList[propertyName].forEach(function (metadata) {
                        var metadataName = metadata.toString();
                        if (metadataName.startsWith('@')) {
                            metadataName = metadataName.substring(1);
                        }
                        metadataEntries.push({
                            propertyName: propertyName,
                            metadataName: metadataName
                        });
                    });
                }
            };
            for (var propertyName in metadataList) {
                _loop_1(propertyName);
            }
        }
    }
    metadataList = target['__prop__metadata__'];
    if (metadataList) {
        var _loop_2 = function (propertyName) {
            if (metadataList[propertyName].length > 0) {
                metadataList[propertyName].forEach(function (metadata) {
                    metadataEntries.push({
                        propertyName: propertyName,
                        metadataName: metadata.ngMetadataName
                    });
                });
            }
        };
        for (var propertyName in metadataList) {
            _loop_2(propertyName);
        }
    }
    return metadataEntries;
}

/**
 * A NgxDOMComponent represent a angular component in the DOM.
 * It allows simple creation, deletion, and moves in the DOM of the element.
 */
var NgxDOMComponent = /** @class */ (function () {
    function NgxDOMComponent(options) {
        options = NgxDOMComponent.normalizeNgxDOMComponentOptions(options);
        this._viewContainerRef = options.viewContainerRef;
        // create the angular component
        this._componentRef = this._viewContainerRef.createComponent(NgxDOMComponent.componentFactoryResolver.resolveComponentFactory(options.componentType), options.index);
        // extract the metadata of the component
        this._metadata = GetNgxEntryComponentMetaData(options.componentType);
        // create a differ for the instance
        this._differ = NgxDOMComponent.differs
            .find(this._componentRef.instance)
            .create();
        // bind inputs and outputs with the create component's instance
        var metadataEntry;
        for (var i = 0, l = this._metadata.length; i < l; i++) {
            metadataEntry = this._metadata[i];
            switch (metadataEntry.metadataName) {
                case 'Input':
                    if (options.inputs[metadataEntry.propertyName]) {
                        this._componentRef.instance[metadataEntry.propertyName] = options.inputs[metadataEntry.propertyName];
                    }
                    else {
                        console.warn("Missing input '" + metadataEntry.propertyName + "' for " + options.componentType);
                    }
                    break;
                case 'Output':
                    if (typeof options.outputs[metadataEntry.propertyName] === 'function') {
                        this._componentRef.instance[metadataEntry.propertyName].subscribe(options.outputs[metadataEntry.propertyName]);
                    }
                    else {
                        console.warn("Missing output '" + metadataEntry.propertyName + "' for " + options.componentType);
                    }
                    break;
            }
        }
        this.detectChanges();
    }
    NgxDOMComponent.normalizeNgxDOMComponentOptions = function (options) {
        if (typeof options.viewContainerRef !== 'object') {
            throw new Error("Invalid viewContainerRef");
        }
        if (typeof options.componentType !== 'function') {
            throw new Error("Invalid component");
        }
        if (typeof options.inputs !== 'object') {
            options.inputs = {};
        }
        if (typeof options.outputs !== 'object') {
            options.outputs = {};
        }
        if ((typeof options.index !== 'number') || Number.isNaN(options.index)) {
            options.index = void 0;
        }
        return options;
    };
    Object.defineProperty(NgxDOMComponent.prototype, "viewContainerRef", {
        /**
         * The angular view on the parent of the element
         * @return {ViewContainerRef}
         */
        get: function () {
            return this._viewContainerRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "componentRef", {
        /**
         * The angular component
         * @return {ComponentRef<any>}
         */
        get: function () {
            return this._componentRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "componentType", {
        /**
         * The constructor of the element
         * @return {ComponentRef<any>}
         */
        get: function () {
            return this._componentRef.componentType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "element", {
        /**
         * The actual DOM element.
         * @return {HTMLElement}
         */
        get: function () {
            return this._componentRef.location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxDOMComponent.prototype, "instance", {
        /**
         * The instance of the constructor
         * @return {any}
         */
        get: function () {
            return this._componentRef.instance;
        },
        enumerable: true,
        configurable: true
    });
    NgxDOMComponent.prototype.insert = function (index, viewContainerRef) {
        if (index === void 0) { index = null; }
        if (viewContainerRef === void 0) { viewContainerRef = this._viewContainerRef; }
        if (typeof index !== 'number') {
            index = this._viewContainerRef.length;
        }
        this._viewContainerRef = viewContainerRef;
        this._viewContainerRef.insert(this._componentRef.hostView, index);
        return this;
    };
    NgxDOMComponent.prototype.move = function (index, viewContainerRef) {
        if (index === void 0) { index = 0; }
        if (viewContainerRef === void 0) { viewContainerRef = this._viewContainerRef; }
        this._viewContainerRef = viewContainerRef;
        this._viewContainerRef.move(this._componentRef.hostView, index);
        return this;
    };
    NgxDOMComponent.prototype.detach = function () {
        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._componentRef.hostView));
        return this;
    };
    NgxDOMComponent.prototype.destroy = function () {
        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._componentRef.hostView));
        return this;
    };
    NgxDOMComponent.prototype.getChanges = function () {
        var _this = this;
        var changes = null;
        var diff = this._differ.diff(this._componentRef.instance);
        if (diff) {
            diff.forEachItem(function (change) {
                var metadataEntry;
                for (var i = 0, l = _this._metadata.length; i < l; i++) {
                    metadataEntry = _this._metadata[i];
                    if ((metadataEntry.propertyName === change.key) && (metadataEntry.metadataName === 'Input')) {
                        if (changes === null) {
                            changes = {};
                        }
                        changes[change.key] = new core.SimpleChange(change.previousValue, change.currentValue, false);
                        break;
                    }
                }
            });
        }
        return changes;
    };
    NgxDOMComponent.prototype.detectChanges = function () {
        if (typeof this._componentRef.instance.ngOnChanges === 'function') {
            var changes = this.getChanges();
            if (changes) {
                this._componentRef.instance.ngOnChanges(changes);
            }
        }
    };
    NgxDOMComponent.componentFactoryResolver = null;
    NgxDOMComponent.differs = null;
    return NgxDOMComponent;
}());

var NgxDOMComponentContainer = /** @class */ (function () {
    function NgxDOMComponentContainer(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    NgxDOMComponentContainer.prototype.create = function (options) {
        options.viewContainerRef = this.viewContainerRef;
        return new NgxDOMComponent(options);
    };
    return NgxDOMComponentContainer;
}());

/**
 * Decorator which allows user to manually define inputs and outputs
 * @param {NgxEntryComponentOptions} options
 * @return {any}
 * @constructor
 */
function NgxEntryComponent(options) {
    if (options.inputs === void 0) {
        options.inputs = [];
    }
    if (!Array.isArray(options.inputs)) {
        throw new TypeError("Expected string[] as options.inputs");
    }
    if (options.outputs === void 0) {
        options.outputs = [];
    }
    if (!Array.isArray(options.outputs)) {
        throw new TypeError("Expected string[] as options.outputs");
    }
    return function (target) {
        var metadataEntries = [];
        var propertyName;
        for (var i = 0, l = options.inputs.length; i < l; i++) {
            propertyName = options.inputs[i];
            if (typeof propertyName === 'string') {
                metadataEntries.push({
                    propertyName: propertyName,
                    metadataName: 'Input',
                });
            }
            else {
                throw new TypeError("Expected string[] as options.inputs[" + i + "]");
            }
        }
        for (var i = 0, l = options.outputs.length; i < l; i++) {
            propertyName = options.outputs[i];
            if (typeof propertyName === 'string') {
                metadataEntries.push({
                    propertyName: propertyName,
                    metadataName: 'Output',
                });
            }
            else {
                throw new TypeError("Expected string[] as options.outputs[" + i + "]");
            }
        }
        SetNgxEntryComponentMetaData(target, metadataEntries);
    };
}

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * The service must be called before anything because NgxDOMComponent requires :
 *  ComponentFactoryResolver and KeyValueDiffers
 */
var NgxDOMComponentService = /** @class */ (function () {
    function NgxDOMComponentService(componentFactoryResolver, differs) {
        NgxDOMComponent.componentFactoryResolver = componentFactoryResolver;
        NgxDOMComponent.differs = differs;
    }
    NgxDOMComponentService.prototype.init = function () {
        // not empty
    };
    NgxDOMComponentService.prototype.createContainer = function (viewContainerRef) {
        return new NgxDOMComponentContainer(viewContainerRef);
    };
    NgxDOMComponentService.prototype.createComponent = function (options) {
        return new NgxDOMComponent(options);
    };
    NgxDOMComponentService = __decorate([
        core.Injectable(),
        __metadata("design:paramtypes", [core.ComponentFactoryResolver,
            core.KeyValueDiffers])
    ], NgxDOMComponentService);
    return NgxDOMComponentService;
}());

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NgxDOMComponentComponent = /** @class */ (function () {
    function NgxDOMComponentComponent() {
        this.ngxDOMComponent = null;
        this.ngxDOMComponentContainer = new NgxDOMComponentContainer(this.contentContainerRef);
    }
    NgxDOMComponentComponent.prototype.ngOnChanges = function () {
        if (this.config) {
            if (this.ngxDOMComponent !== null) {
                this.ngxDOMComponent.destroy();
            }
            this.ngxDOMComponent = this.ngxDOMComponentContainer.create(this.config);
        }
    };
    NgxDOMComponentComponent.prototype.ngOnDestroy = function () {
        if (this.ngxDOMComponent !== null) {
            this.ngxDOMComponent.destroy();
            this.ngxDOMComponent = null;
        }
    };
    __decorate$1([
        core.Input(),
        __metadata$1("design:type", Object)
    ], NgxDOMComponentComponent.prototype, "config", void 0);
    __decorate$1([
        core.ViewChild('contentContainer', { read: core.ViewContainerRef }),
        __metadata$1("design:type", core.ViewContainerRef)
    ], NgxDOMComponentComponent.prototype, "contentContainerRef", void 0);
    NgxDOMComponentComponent = __decorate$1([
        core.Component({
            selector: 'ngx-dom-component',
            template: "<ng-template #contentContainer></ng-template>"
        }),
        __metadata$1("design:paramtypes", [])
    ], NgxDOMComponentComponent);
    return NgxDOMComponentComponent;
}());

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NgxDOMComponentModule = /** @class */ (function () {
    function NgxDOMComponentModule() {
    }
    NgxDOMComponentModule = __decorate$2([
        core.NgModule({
            declarations: [
                NgxDOMComponentComponent
            ],
            providers: [
                NgxDOMComponentService
            ],
            exports: [
                NgxDOMComponentComponent
            ]
        })
    ], NgxDOMComponentModule);
    return NgxDOMComponentModule;
}());

exports.CONST_PROP_METADATA = CONST_PROP_METADATA;
exports.SetNgxEntryComponentMetaData = SetNgxEntryComponentMetaData;
exports.GetNgxEntryComponentMetaData = GetNgxEntryComponentMetaData;
exports.NgxDOMComponent = NgxDOMComponent;
exports.NgxDOMComponentContainer = NgxDOMComponentContainer;
exports.NgxEntryComponent = NgxEntryComponent;
exports.NgxDOMComponentModule = NgxDOMComponentModule;
exports.NgxDOMComponentService = NgxDOMComponentService;
exports.NgxDOMComponentComponent = NgxDOMComponentComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
